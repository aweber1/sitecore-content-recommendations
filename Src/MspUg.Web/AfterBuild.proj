<?xml version="1.0" encoding="utf-8" ?>

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Deploy" ToolsVersion="4.0">
	<PropertyGroup>
		<BuildReferencesFolder>$(MSBuildProjectDirectory)\_Build\References</BuildReferencesFolder>
		<Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
		<Environment Condition="'$(Environment)' == ''">Local</Environment>
		<!-- Path to the project References folder. Change this to reflect your local path. -->
		<ReferencesFolder>$(MSBuildProjectDirectory)\..\..\Lib</ReferencesFolder>

		<TransformsRelativePath>\_Build\Transforms</TransformsRelativePath>
		<CommonTransformFileExt>.Common</CommonTransformFileExt>
	</PropertyGroup>

	<!-- reference custom tasks -->
	<UsingTask TaskName="Tasks.ExecWithOutput" AssemblyFile="$(BuildReferencesFolder)\BalancedBit.MSBuild.dll" />
	<UsingTask TaskName="Tasks.FileTimeNewer" AssemblyFile="$(BuildReferencesFolder)\BalancedBit.MSBuild.dll" />
	<UsingTask TaskName="SlowCheetah.Xdt.TransformXml" AssemblyFile="$(BuildReferencesFolder)\SlowCheetah.Xdt.dll" />

	<Target Name="SetProperties">
		<ExecWithOutput Command="cd $(MSBuildProjectDirectory)\..\..\.. &amp; cd">
			<Output TaskParameter="Results" PropertyName="ClientRoot" />
		</ExecWithOutput>

		<!-- These properties are dependent on a task-generated property (ClientRoot) -->
		<PropertyGroup>			
			<LocalSiteRoot>$(ClientRoot)\Sites\8.1</LocalSiteRoot>
			<LocalSiteWebRoot>$(LocalSiteRoot)\Website</LocalSiteWebRoot>
			<LocalWebConfig>$(LocalSiteWebRoot)\Web.config</LocalWebConfig>
		</PropertyGroup>		
	</Target>	

	<Target Name="Deploy" DependsOnTargets="SetProperties;GenerateTransformsList">
		<!-- change the working directory -->
		<Exec Command="cd $(MSBuildProjectDirectory)" />

		<!-- 
		Perform xcopy on the project directory, copying modified folders to the specified output directory 
		Use xcopyExcludes.txt file to specify files/folders to be excluded from the copy
		
		DO NOT USE /s /r SWITCHES AS THEY WILL SET THE DESTINATION FOLDER'S MODIFIED TO THE SAME DATE AS THE SOURCE FOLDER
		this will cause the application to recycle as the .net file monitor will think the application root folder has changed
		kinda sucks because all subfolders will then be copied regardless of whether they have files or not, so you
		may end up with rogue folders in your destination folder
		-->
		<Exec Command="xcopy &quot;$(MSBuildProjectDirectory)&quot; &quot;$(LocalSiteWebRoot)&quot; /d /e /y /c /i /exclude:_Build\FileCopyExcludes\xcopyLocalExcludes.txt" />

		<!-- 
		Perform xcopy on the project bin directory, copying modified files to the specified output bin directory 
		Use xcopyBinExcludes.txt file to specify files/folders to be excluded from the copy
		-->
		<Exec Command="xcopy &quot;$(MSBuildProjectDirectory)\bin&quot; &quot;$(LocalSiteWebRoot)\bin&quot; /d /r /y /c /i /exclude:_Build\FileCopyExcludes\xcopyBinExcludes.txt" />

		<!-- Copy files from the References folder -->
		<Exec Command="xcopy &quot;$(ReferencesFolder)&quot; &quot;$(LocalSiteWebRoot)\bin&quot; /d /r /y /c /i /exclude:_Build\FileCopyExcludes\xcopyBinExcludes.txt" />

		<Message Text="Common Transforms: @(CommonTransforms)" />
		<Message Text="Source File: %(CommonTransforms.SourceFilePath)" />
		<Message Text="Destination File: %(CommonTransforms.DestinationFilePath)" />
		<Message Text="Modified: %(CommonTransforms.Modified)" />

		<Message Text="Environment Transforms: @(EnvironmentTransforms)" />
		<Message Text="Source File: %(EnvironmentTransforms.SourceFilePath)" />
		<Message Text="Destination File: %(EnvironmentTransforms.DestinationFilePath)" />
		<Message Text="Modified: %(EnvironmentTransforms.Modified)" />

		<PropertyGroup>
			<!-- using MSBuild Item Functions, get a list of the items with 'Modified' metadata value of 'True' -->
			<EnvironmentModifiedList>@(EnvironmentTransforms->WithMetadataValue('Modified','True'))</EnvironmentModifiedList>
			<!-- set a default value for $(EnvironmentConfigModified), e.g. False -->
			<EnvironmentConfigModified>False</EnvironmentConfigModified>
			<!-- if the list of items we generated earlier contains any values, then set $(EnvironmentConfigModified) to 'True' -->
			<EnvironmentConfigModified Condition="$(EnvironmentModifiedList.get_Length()) > 0">True</EnvironmentConfigModified>

			<CommonModifiedList>@(CommonTransforms->WithMetadataValue('Modified','True'))</CommonModifiedList>
			<CommonConfigModified>False</CommonConfigModified>
			<CommonConfigModified Condition="$(CommonModifiedList.get_Length()) > 0">True</CommonConfigModified>
		</PropertyGroup>
		
		<Message Text="Environment Config Modified: $(EnvironmentConfigModified)" />
		<Message Text="Common Config Modified: $(CommonConfigModified)" />

		<!--
		scenarios:
		* source file is modified
			- copy source to destination
			- perform common transform on destination file
			- perform environment transform on destination file
		* common file is modified
			- perform common transform on source
			- perform environment transform on destination
		* environment file is modified
			- perform common transform on destination
			- perform environment transform on destination
		-->
		
		<SlowCheetah.Xdt.TransformXml Source="%(CommonTransforms.DestinationFilePath)"
			Transform="%(CommonTransforms.Identity)"
			Destination="%(CommonTransforms.DestinationFilePath)"
			Condition="$(EnvironmentConfigModified) Or $(CommonConfigModified)" />

		<!--if common is modified, then the environment source needs to change to the common destination, otherwise environment will overwrite changes made by common -->
		<SlowCheetah.Xdt.TransformXml Source="%(EnvironmentTransforms.DestinationFilePath)"
			Transform="%(EnvironmentTransforms.Identity)"
			Destination="%(EnvironmentTransforms.DestinationFilePath)"
			Condition="$(EnvironmentConfigModified) Or $(CommonConfigModified)" />
	</Target>

	<Target Name="GenerateTransformsList">
		<ItemGroup>
			<CommonTransforms Include="$(MSBuildProjectDirectory)$(TransformsRelativePath)\**\*$(CommonTransformFileExt)" />
			<EnvironmentTransforms Include="$(MSBuildProjectDirectory)$(TransformsRelativePath)\**\*.$(Environment)" />
		</ItemGroup>

		<!--  Add metadata to the transform items -->
		<ItemGroup>
			<CommonTransforms Condition="%(CommonTransforms.Identity) != ''">
				<SourceFilePath>$([System.String]::new('%(Identity)').Replace(&quot;$(TransformsRelativePath)&quot;, &quot;&quot;).Replace(&quot;$(CommonTransformFileExt)&quot;, &quot;&quot;))</SourceFilePath>
				<DestinationFilePath>$([System.String]::new('%(Identity)').Replace(&quot;$(MSBuildProjectDirectory)$(TransformsRelativePath)&quot;,&quot;$(LocalSiteWebRoot)&quot;).Replace(&quot;$(CommonTransformFileExt)&quot;,&quot;&quot;))</DestinationFilePath>				
			</CommonTransforms>
			<EnvironmentTransforms Condition="%(EnvironmentTransforms.Identity) != ''">
				<SourceFilePath>$([System.String]::new('%(EnvironmentTransforms.Identity)').Replace(&quot;$(TransformsRelativePath)&quot;, &quot;&quot;).Replace(&quot;.$(Environment)&quot;,&quot;&quot;))</SourceFilePath>
				<DestinationFilePath>$([System.String]::new('%(EnvironmentTransforms.Identity)').Replace(&quot;$(MSBuildProjectDirectory)$(TransformsRelativePath)&quot;, &quot;$(LocalSiteWebRoot)&quot;).Replace(&quot;.$(Environment)&quot;,&quot;&quot;))</DestinationFilePath>
			</EnvironmentTransforms>
		</ItemGroup>
	</Target>

	<!-- This target should be executed before any file copying takes place -->
	<Target Name="SetCommonTransformsModified" Outputs="%(CommonTransforms.Identity)" AfterTargets="GenerateTransformsList">
		<FileTimeNewer SourceFiles="%(CommonTransforms.Identity)|%(CommonTransforms.SourceFilePath)" CompareFile="%(CommonTransforms.DestinationFilePath)">
			<Output TaskParameter="Result" PropertyName="Modified" />
		</FileTimeNewer>
		<ItemGroup>
			<CommonTransforms Condition="%(CommonTransforms.Identity) != ''">
				<Modified>$(Modified)</Modified>
			</CommonTransforms>
		</ItemGroup>
	</Target>
	
	<!-- This target should be executed before any file copying takes place -->
	<Target Name="SetEnvironmentTransformsModified" Outputs="%(EnvironmentTransforms.Identity)" AfterTargets="SetCommonTransformsModified">
		<FileTimeNewer SourceFiles="%(EnvironmentTransforms.Identity)|%(EnvironmentTransforms.SourceFilePath)" CompareFile="%(EnvironmentTransforms.DestinationFilePath)">
			<Output TaskParameter="Result" PropertyName="Modified" />
		</FileTimeNewer>
		<ItemGroup>
			<EnvironmentTransforms Condition="%(EnvironmentTransforms.Identity) != ''">
				<Modified>$(Modified)</Modified>
			</EnvironmentTransforms>
		</ItemGroup>
	</Target>
		

	<!-- xcopy switches 
	
	source	Specifies the file to copy.
	destination	Specifies the location and the name of new files.
	
	/exclude:filename list of directories/extensions to exclude from copying
	/a	Copies files with the archive attribute set. This switch does not change the attribute.
	/m	Copies files with the archive attribute set, and turns off the archive attribute.
	/d:date	Copies files changed on or after the specified date.
	/p	Prompts you before each destination file is created.
	/s	Copies folders and subfolders except for empty ones.
	/e	Copies any subfolder, even if it is empty.
	/w	Prompts you to press a key before copying.
	/c	Continues copying even if errors occur.
	/i	If the destination does not exist, and you are copying more than one file, this switch assumes that the destination is a folder.
	/q	Does not display file names while copying.
	/f	Displays full source and destination file names while copying.
	/l	Displays files that are going to be copied.
	/h	Copies hidden and system files.
	/r	Overwrites read-only files.
	/t	Creates a folder structure, but does not copy files. Does not include empty folders or subfolders. Use the /t with the /e switch to include empty folders and subfolders.
	/u	Updates the files that already exist in that destination.
	/k	Copies attributes. Typical xcopy commands reset read-only attributes.
	/y	Overwrites existing files without prompting you.
	/-y	Prompts you before overwriting existing files.
	/n	Copies using the generated short names.
	
	-->

</Project>
